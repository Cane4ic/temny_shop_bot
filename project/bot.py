import asyncio, os, sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, WebAppInfo, FSInputFile

TOKEN = os.environ.get("BOT_TOKEN")  # –ø–µ—Ä–µ–¥–∞–µ–º –≤ Render
WEBAPP_URL = os.environ.get("WEBAPP_URL")  # URL WebApp

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# --- DATABASE ---
DB_FILE = '/home/render/project/products.db'  # SQLite –±–∞–∑–∞ –Ω–∞ Render

def init_db():
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute('''
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT UNIQUE NOT NULL,
            price REAL NOT NULL,
            stock INTEGER NOT NULL,
            category TEXT
        )
    ''')
    conn.commit()
    conn.close()

def get_all_products():
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute("SELECT name, price, stock, category FROM products")
    products = {row[0]: {"price": row[1], "stock": row[2], "category": row[3]} for row in cur.fetchall()}
    conn.close()
    return products

def add_product_to_db(name, price, stock, category):
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute(
        "INSERT OR REPLACE INTO products (name, price, stock, category) VALUES (?, ?, ?, ?)",
        (name, price, stock, category)
    )
    conn.commit()
    conn.close()

def update_stock(name, amount):
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute("UPDATE products SET stock = stock + ? WHERE name = ?", (amount, name))
    conn.commit()
    conn.close()

def update_price(name, price):
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute("UPDATE products SET price = ? WHERE name = ?", (price, name))
    conn.commit()
    conn.close()

def delete_product(name):
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute("DELETE FROM products WHERE name = ?", (name,))
    conn.commit()
    conn.close()

# --- ADMINS ---
admins = set()
ADMIN_LOGIN = "admin"
ADMIN_PASSWORD = "1234"

# --- FSM States ---
class AdminLogin(StatesGroup):
    waiting_for_login = State()
    waiting_for_password = State()

class AdminAction(StatesGroup):
    waiting_for_new_item = State()
    waiting_for_restock = State()
    waiting_for_new_price = State()

# --- UTILS ---
def admin_panel_kb():
    products = get_all_products()
    kb = InlineKeyboardBuilder()
    for name, info in products.items():
        kb.button(
            text=f"{name} (${info['price']}, {info['stock']} —à—Ç., –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {info['category']})",
            callback_data=f"edit_{name}"
        )
    kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä", callback_data="add_new")
    return kb.as_markup()

# ---------------- START / WEBAPP ----------------
@dp.message(lambda m: m.text == "/start")
async def start(message: Message):
    kb = InlineKeyboardBuilder()
    kb.button(text="üõç –û—Ç–∫—Ä—ã—Ç—å TEMNY SHOP", web_app=WebAppInfo(url=WEBAPP_URL))

    banner = FSInputFile("banner.png")
    caption = (
        "‚ú® <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤</b> <i>TEMNY SHOP</i> ‚ú®\n\n"
        "üñ§ –ú–∞–≥–∞–∑–∏–Ω –ø—Ä–µ–º–∏—É–º-—Ç–æ–≤–∞—Ä–æ–≤ –∏ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.\n"
        "üî• –í—Å—ë –±—ã—Å—Ç—Ä–æ, –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –∞–Ω–æ–Ω–∏–º–Ω–æ.\n\n"
        "üëá –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω:"
    )

    await message.answer_photo(
        photo=banner,
        caption=caption,
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )

# ---------------- ADMIN LOGIN ----------------
@dp.message(lambda m: m.text == "/admin")
async def admin_command(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    await state.set_state(AdminLogin.waiting_for_login)

@dp.message(AdminLogin.waiting_for_login)
async def process_login(message: Message, state: FSMContext):
    await state.update_data(login=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    await state.set_state(AdminLogin.waiting_for_password)

@dp.message(AdminLogin.waiting_for_password)
async def process_password(message: Message, state: FSMContext):
    data = await state.get_data()
    login = data["login"]
    password = message.text
    user_id = message.from_user.id

    if login == ADMIN_LOGIN and password == ADMIN_PASSWORD:
        admins.add(user_id)
        await message.answer("–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã ‚úÖ", reply_markup=admin_panel_kb())
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å ‚ùå")
    await state.clear()

# ---------------- ADMIN PANEL CALLBACKS ----------------
@dp.callback_query(lambda c: c.data.startswith("edit_"))
async def edit_item(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    if user_id not in admins:
        await callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω ‚ùå")
        return

    item_name = callback_query.data[5:]
    kb = InlineKeyboardBuilder()
    kb.button(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data=f"restock_{item_name}")
    kb.button(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"price_{item_name}")
    kb.button(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{item_name}")
    await callback_query.message.answer(f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–º: {item_name}", reply_markup=kb.as_markup())

@dp.callback_query(lambda c: c.data.startswith("restock_"))
async def restock_item_callback(callback_query: types.CallbackQuery, state: FSMContext):
    item_name = callback_query.data[8:]
    await state.update_data(item_name=item_name)
    await state.set_state(AdminAction.waiting_for_restock)
    await callback_query.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ {item_name}:")

@dp.message(AdminAction.waiting_for_restock)
async def process_restock(message: Message, state: FSMContext):
    data = await state.get_data()
    item_name = data["item_name"]
    try:
        amount = int(message.text)
        update_stock(item_name, amount)
        await message.answer(f"–¢–æ–≤–∞—Ä {item_name} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} —à—Ç. ‚úÖ", reply_markup=admin_panel_kb())
    except:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    await state.clear()

@dp.callback_query(lambda c: c.data.startswith("price_"))
async def change_price_callback(callback_query: types.CallbackQuery, state: FSMContext):
    item_name = callback_query.data[6:]
    await state.update_data(item_name=item_name)
    await state.set_state(AdminAction.waiting_for_new_price)
    await callback_query.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {item_name}:")

@dp.message(AdminAction.waiting_for_new_price)
async def process_new_price(message: Message, state: FSMContext):
    data = await state.get_data()
    item_name = data["item_name"]
    try:
        price = float(message.text)
        update_price(item_name, price)
        await message.answer(f"–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ {item_name} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ${price} ‚úÖ", reply_markup=admin_panel_kb())
    except:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    await state.clear()

@dp.callback_query(lambda c: c.data.startswith("delete_"))
async def delete_item_callback(callback_query: types.CallbackQuery):
    item_name = callback_query.data[7:]
    delete_product(item_name)
    await callback_query.message.answer(f"–¢–æ–≤–∞—Ä {item_name} —É–¥–∞–ª–µ–Ω ‚úÖ", reply_markup=admin_panel_kb())

@dp.callback_query(lambda c: c.data == "add_new")
async def add_new_item_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state(AdminAction.waiting_for_new_item)
    await callback_query.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ,–¶–µ–Ω–∞,–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ,–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
    )

@dp.message(AdminAction.waiting_for_new_item)
async def process_new_item(message: Message, state: FSMContext):
    try:
        name, price, stock, category = message.text.split(",")
        add_product_to_db(name.strip(), float(price.strip()), int(stock.strip()), category.strip())
        await message.answer(
            f"–¢–æ–≤–∞—Ä {name.strip()} –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.strip()})",
            reply_markup=admin_panel_kb()
        )
    except:
        await message.answer("–û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ù–∞–∑–≤–∞–Ω–∏–µ,–¶–µ–Ω–∞,–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ,–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
    await state.clear()

# ---------------- MAIN ----------------
async def main():
    init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
