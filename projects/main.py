import os
from flask import Flask, jsonify, send_file, request
from threading import Thread
from aiogram import Bot, Dispatcher, types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, WebAppInfo, FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup
import asyncio
import csv
import aiohttp

# ---------- CONFIG ----------
BOT_TOKEN = os.environ.get("BOT_TOKEN")
WEBAPP_URL = os.environ.get("WEBAPP_URL")
GOOGLE_SHEET_CSV_URL = os.environ.get("GOOGLE_SHEET_CSV_URL")  # —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π CSV Google Sheet

# ---------- FLASK ----------
app = Flask(__name__)

async def fetch_products_from_google_sheet():
    products = {}
    async with aiohttp.ClientSession() as session:
        async with session.get(GOOGLE_SHEET_CSV_URL) as resp:
            text = await resp.text()
            reader = csv.DictReader(text.splitlines())
            for row in reader:
                name = row.get("Name")
                price = row.get("Price", "0")
                stock = row.get("Stock", "0")
                category = row.get("Category", "Other")
                if name:
                    products[name] = {"price": price, "stock": stock, "category": category}
    return products

@app.route("/")
def index():
    return send_file("index.html")

@app.route("/products")
def get_products():
    products = asyncio.run(fetch_products_from_google_sheet())
    return jsonify(products)

def run_flask():
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))

# ---------- TELEGRAM BOT ----------
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

admins = set()
ADMIN_LOGIN = "admin"
ADMIN_PASSWORD = "1234"

# --- FSM States ---
class AdminLogin(StatesGroup):
    waiting_for_login = State()
    waiting_for_password = State()

class AdminAction(StatesGroup):
    waiting_for_new_item = State()
    waiting_for_restock = State()
    waiting_for_new_price = State()
    waiting_for_broadcast_message = State()
    waiting_for_edit_name = State()
    waiting_for_edit_price = State()
    waiting_for_edit_stock = State()
    waiting_for_edit_category = State()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
temp_edit_data = {}

# --- BOT HANDLERS ---
@dp.message(lambda m: m.text == "/start")
async def start(message: Message):
    kb = InlineKeyboardBuilder()
    kb.button(text="üõç –û—Ç–∫—Ä—ã—Ç—å TEMNY SHOP", web_app=WebAppInfo(url=WEBAPP_URL))

    banner = FSInputFile("banner.png")
    caption = (
        "‚ú® <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤</b> <i>TEMNY SHOP</i> ‚ú®\n\n"
        "üñ§ –ú–∞–≥–∞–∑–∏–Ω –ø—Ä–µ–º–∏—É–º-—Ç–æ–≤–∞—Ä–æ–≤ –∏ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.\n"
        "üî• –í—Å—ë –±—ã—Å—Ç—Ä–æ, –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –∞–Ω–æ–Ω–∏–º–Ω–æ.\n\n"
        "üëá –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω:"
    )

    await message.answer_photo(
        photo=banner,
        caption=caption,
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )

@dp.message(lambda m: m.text == "/admin")
async def admin_command(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    await state.set_state(AdminLogin.waiting_for_login)

@dp.message(AdminLogin.waiting_for_login)
async def process_login(message: Message, state: FSMContext):
    await state.update_data(login=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    await state.set_state(AdminLogin.waiting_for_password)

@dp.message(AdminLogin.waiting_for_password)
async def process_password(message: Message, state: FSMContext):
    data = await state.get_data()
    login = data["login"]
    password = message.text
    user_id = message.from_user.id

    if login == ADMIN_LOGIN and password == ADMIN_PASSWORD:
        admins.add(user_id)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä", callback_data="edit_product"),
            InlineKeyboardButton(text="–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="broadcast")
        )

        await message.answer(
            "‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Admin Panel.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –Ω–∏–∂–µ:",
            reply_markup=keyboard
        )
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
    await state.clear()

# --- CALLBACK HANDLERS ---
@dp.callback_query(lambda c: c.data == "edit_product")
async def callback_edit_product(callback_query: types.CallbackQuery):
    await callback_query.message.answer(
        "–í—ã –≤—ã–±—Ä–∞–ª–∏: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
    )
    await AdminAction.waiting_for_edit_name.set()

@dp.callback_query(lambda c: c.data == "broadcast")
async def callback_broadcast(callback_query: types.CallbackQuery):
    await callback_query.message.answer(
        "–í—ã –≤—ã–±—Ä–∞–ª–∏: –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:"
    )
    await AdminAction.waiting_for_broadcast_message.set()

# --- FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ---
@dp.message(AdminAction.waiting_for_edit_name)
async def edit_name(message: Message, state: FSMContext):
    temp_edit_data["name"] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:")
    await AdminAction.waiting_for_edit_price.set()

@dp.message(AdminAction.waiting_for_edit_price)
async def edit_price(message: Message, state: FSMContext):
    temp_edit_data["price"] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:")
    await AdminAction.waiting_for_edit_stock.set()

@dp.message(AdminAction.waiting_for_edit_stock)
async def edit_stock(message: Message, state: FSMContext):
    temp_edit_data["stock"] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:")
    await AdminAction.waiting_for_edit_category.set()

@dp.message(AdminAction.waiting_for_edit_category)
async def edit_category(message: Message, state: FSMContext):
    temp_edit_data["category"] = message.text

    # TODO: –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å Google Sheets —á–µ—Ä–µ–∑ API
    await message.answer(
        f"–¢–æ–≤–∞—Ä <b>{temp_edit_data['name']}</b> –æ–±–Ω–æ–≤–ª—ë–Ω:\n"
        f"–¶–µ–Ω–∞: {temp_edit_data['price']}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {temp_edit_data['stock']}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {temp_edit_data['category']}",
        parse_mode="HTML"
    )
    temp_edit_data.clear()
    await state.clear()

# --- FSM –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ ---
@dp.message(AdminAction.waiting_for_broadcast_message)
async def broadcast_message(message: Message, state: FSMContext):
    users = []  # TODO: –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    text = message.text
    success = 0
    for user_id in users:
        try:
            await bot.send_message(user_id, text)
            success += 1
        except:
            continue
    await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    await state.clear()

# ---------- MAIN ----------
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    t = Thread(target=run_flask)
    t.start()
    asyncio.run(main())
