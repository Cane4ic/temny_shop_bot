import os
import json
from flask import Flask, jsonify, send_file
from threading import Thread
from aiogram import Bot, Dispatcher, types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, WebAppInfo, FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
import asyncio
import gspread
from google.oauth2.service_account import Credentials

# ---------- CONFIG ----------
BOT_TOKEN = os.environ.get("BOT_TOKEN")
WEBAPP_URL = os.environ.get("WEBAPP_URL")
GOOGLE_SHEET_NAME = os.environ.get("GOOGLE_SHEET_NAME", "TEMNY SHOP")

# ---------- GOOGLE SHEETS ----------
def get_google_sheet():
    creds_json = json.loads(os.environ.get("GOOGLE_CREDENTIALS"))
    
    scopes = [
        "https://www.googleapis.com/auth/spreadsheets",
        "https://www.googleapis.com/auth/drive"
    ]
    
    creds = Credentials.from_service_account_info(creds_json, scopes=scopes)
    client = gspread.authorize(creds)
    return client.open(GOOGLE_SHEET_NAME).sheet1

def fetch_products_from_google_sheet():
    sheet = get_google_sheet()
    data = sheet.get_all_records()
    products = {}
    for row in data:
        name = row.get("Name")
        price = row.get("Price", "0")
        stock = row.get("Stock", "0")
        category = row.get("Category", "Other")
        if name:
            products[name] = {"price": price, "stock": stock, "category": category}
    return products

def update_product_in_sheet(product_name, field, new_value):
    sheet = get_google_sheet()
    data = sheet.get_all_records()
    for idx, row in enumerate(data, start=2):  # —Å—Ç—Ä–æ–∫–∞ 2 ‚Äî –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        if row.get("Name") == product_name:
            col_map = {"Name": 1, "Price": 2, "Stock": 3, "Category": 4}
            if field in col_map:
                sheet.update_cell(idx, col_map[field], new_value)
            break

# ---------- FLASK ----------
app = Flask(__name__)

@app.route("/")
def index():
    return send_file("index.html")

@app.route("/products")
def get_products():
    products = fetch_products_from_google_sheet()
    return jsonify(products)

def run_flask():
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))

# ---------- TELEGRAM BOT ----------
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

admins = set()
ADMIN_LOGIN = "admin"
ADMIN_PASSWORD = "1234"

# --- FSM States ---
class AdminLogin(StatesGroup):
    waiting_for_login = State()
    waiting_for_password = State()

class EditProduct(StatesGroup):
    waiting_for_product_choice = State()
    waiting_for_field_choice = State()
    waiting_for_new_value = State()

class Broadcast(StatesGroup):
    waiting_for_text = State()

# --- BOT HANDLERS ---
@dp.message(lambda m: m.text == "/start")
async def start(message: Message):
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Google Sheets
    try:
        creds_json = json.loads(os.environ.get("GOOGLE_CREDENTIALS"))
        creds = Credentials.from_service_account_info(creds_json)
        client = gspread.authorize(creds)
        sheet = client.open(GOOGLE_SHEET_NAME)
        try:
            users_sheet = sheet.worksheet("Users")
        except gspread.WorksheetNotFound:
            users_sheet = sheet.add_worksheet(title="Users", rows="1000", cols="2")
            users_sheet.append_row(["UserID", "Username"])

        users = [str(row[0]) for row in users_sheet.get_all_values()[1:]]
        if str(message.from_user.id) not in users:
            users_sheet.append_row([message.from_user.id, message.from_user.username or ""])
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", e)

    kb = InlineKeyboardBuilder()
    kb.button(text="üõç –û—Ç–∫—Ä—ã—Ç—å TEMNY SHOP", web_app=WebAppInfo(url=WEBAPP_URL))

    banner = FSInputFile("banner.png")
    caption = (
        "‚ú® <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤</b> <i>TEMNY SHOP</i> ‚ú®\n\n"
        "üñ§ –ú–∞–≥–∞–∑–∏–Ω –ø—Ä–µ–º–∏—É–º-—Ç–æ–≤–∞—Ä–æ–≤ –∏ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.\n"
        "üî• –í—Å—ë –±—ã—Å—Ç—Ä–æ, –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –∞–Ω–æ–Ω–∏–º–Ω–æ.\n\n"
        "üëá –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω:"
    )

    await message.answer_photo(
        photo=banner,
        caption=caption,
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )

@dp.message(lambda m: m.text == "/admin")
async def admin_command(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    await state.set_state(AdminLogin.waiting_for_login)

@dp.message(AdminLogin.waiting_for_login)
async def process_login(message: Message, state: FSMContext):
    await state.update_data(login=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    await state.set_state(AdminLogin.waiting_for_password)

@dp.message(AdminLogin.waiting_for_password)
async def process_password(message: Message, state: FSMContext):
    data = await state.get_data()
    login = data["login"]
    password = message.text
    user_id = message.from_user.id

    if login == ADMIN_LOGIN and password == ADMIN_PASSWORD:
        admins.add(user_id)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä", callback_data="edit_product")],
            [InlineKeyboardButton(text="üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="send_broadcast")]
        ])

        await message.answer(
            "üëë <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Admin Panel</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –Ω–∏–∂–µ:",
            parse_mode="HTML",
            reply_markup=keyboard
        )
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å ‚ùå")
    await state.clear()

@dp.message(Command("check_sheets"))
async def check_sheets(message: types.Message):
    try:
        sheet = get_google_sheet()
        values = sheet.row_values(1)
        if values:
            await message.answer(f"‚úÖ –î–æ—Å—Ç—É–ø –∫ Google Sheets –µ—Å—Ç—å!\n–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞:\n<code>{', '.join(values)}</code>", parse_mode="HTML")
        else:
            await message.answer("‚úÖ –î–æ—Å—Ç—É–ø –∫ Google Sheets –µ—Å—Ç—å, –Ω–æ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Google Sheets:\n<code>{e}</code>", parse_mode="HTML")

# ---------- CALLBACK: –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï ----------
@dp.callback_query(lambda c: c.data == "edit_product")
async def start_edit_product(callback: CallbackQuery, state: FSMContext):
    products = fetch_products_from_google_sheet()
    keyboard = InlineKeyboardBuilder()
    for name in products.keys():
        keyboard.button(text=name, callback_data=f"choose_product:{name}")
    keyboard.adjust(2)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard.as_markup())
    await state.set_state(EditProduct.waiting_for_product_choice)

@dp.callback_query(lambda c: c.data.startswith("choose_product:"))
async def choose_product(callback: CallbackQuery, state: FSMContext):
    product_name = callback.data.split(":", 1)[1]
    await state.update_data(product_name=product_name)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_field:Name")],
        [InlineKeyboardButton(text="üíµ –¶–µ–Ω–∞", callback_data="edit_field:Price")],
        [InlineKeyboardButton(text="üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="edit_field:Stock")],
        [InlineKeyboardButton(text="üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="edit_field:Category")]
    ])
    await callback.message.answer(f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ <b>{product_name}</b>?", parse_mode="HTML", reply_markup=keyboard)
    await state.set_state(EditProduct.waiting_for_field_choice)

@dp.callback_query(lambda c: c.data.startswith("edit_field:"))
async def choose_field(callback: CallbackQuery, state: FSMContext):
    field = callback.data.split(":", 1)[1]
    await state.update_data(field=field)
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è <b>{field}</b>:", parse_mode="HTML")
    await state.set_state(EditProduct.waiting_for_new_value)

@dp.message(EditProduct.waiting_for_new_value)
async def set_new_value(message: Message, state: FSMContext):
    data = await state.get_data()
    product_name = data["product_name"]
    field = data["field"]
    new_value = message.text

    update_product_in_sheet(product_name, field, new_value)
    await message.answer(f"‚úÖ –ü–æ–ª–µ <b>{field}</b> —Ç–æ–≤–∞—Ä–∞ <b>{product_name}</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", parse_mode="HTML")
    await state.clear()

# ---------- CALLBACK: –†–ê–°–°–´–õ–ö–ê ----------
@dp.callback_query(lambda c: c.data == "send_broadcast")
async def start_broadcast(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.set_state(Broadcast.waiting_for_text)

@dp.message(Broadcast.waiting_for_text)
async def send_broadcast(message: Message, state: FSMContext):
    text = message.text
    try:
        creds_json = json.loads(os.environ.get("GOOGLE_CREDENTIALS"))
        creds = Credentials.from_service_account_info(creds_json)
        client = gspread.authorize(creds)
        sheet = client.open(GOOGLE_SHEET_NAME).worksheet("Users")
        users = sheet.get_all_records()

        count = 0
        for user in users:
            try:
                await bot.send_message(user["UserID"], text)
                count += 1
            except:
                pass

        await message.answer(f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —Å–æ–æ–±—â–µ–Ω–∏–π.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")
    await state.clear()

# ---------- MAIN ----------
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    t = Thread(target=run_flask)
    t.start()
    asyncio.run(main())

